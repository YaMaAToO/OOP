Тема 2: Читання та запис файлів. Серіалізація та десеріалізація об'єктів в Java

Стосовно до роботи з файлами і введенням-виведенням будемо говорити про потік (stream), як про абстракцію, яка використовується для читання або запису інформації (файлів, сокетів, тексту консолі і т.д.).

Потік пов'язаний з реальним фізичним пристроєм за допомогою системи
введення-виведення Java. У нас може бути визначений потік, який пов'язаний з файлом і через який ми можемо вести читання або запис файлу. Це також може бути потік, пов'язаний з мережевим сокетом, за допомогою якого можна отримати або відправити дані в мережі. Всі ці завдання: читання і запис різних файлів, обмін інформацією по мережі, введення-виведення в консолі вирішують в Java за допомогою потоків.

Об'єкт, з якого можна зчитати дані, називається потоком введення, а об'єкт, в який можна записувати дані, - потоком виводу. 
Наприклад, якщо треба зчитати зміст файлу, то застосовується потік введення, а якщо треба записати в файл - то потік виведення.

В основі всіх класів, керуючих потоками байтів, знаходяться два абстрактних класи: InputStream (представляє потоки введення) і OutputStream (представляє потоки виведення)

Але оскільки працювати з байтами не дуже зручно, то для роботи з
потоками символів були додані абстрактні класи Reader (для читання потоків символів) і Writer (для запису потоків символів)

Потоки байтів
Клас InputStream

Клас InputStream є базовим для всіх класів, керуючих байтовими потоками введення. Розглянемо його основні методи:
int available (): повертає кількість байтів, доступних для читання в потоці
void close (): закриває потік
int read (): повертає цілочисельне подання наступного байта в потоці. Коли в потоці не залишиться доступних для читання байтів, даний метод поверне число -1
int read (byte [] buffer): зчитує байти з потоку в масив buffer. Після читання повертає число зчитаних байтів. Якщо жодного байта не було зчитано, то повертається число -1
int read (byte [] buffer, int offset, int length): зчитує кілька байтів, що дорівнює length, з потоку в масив buffer. При цьому зчитані байти поміщаються в масиві, починаючи зі зсуву offset, тобто з елемента buffer [offset]. Метод повертає число успішно прочитаних байтів.
long skip (long number): пропускає в потоці при читанні кілька байт, що дорівнює number

Клас OutputStream
Клас OutputStream є базовим класом для всіх класів, які працюють з бінарними потоками запису. Свою функціональність він реалізує через такі методи:
void close (): закриває потік
void flush (): очищає буфер виведення, записуючи весь його вміст
void write (int b): записує у вихідний потік один байт, який представлений
цілочисельним параметром b
void write (byte [] buffer): записує у вихідний потік масив байтів buffer.
void write (byte [] buffer, int offset, int length): записує у вихідний потік деяке число байтів, що дорівнює length, з масиву buffer, починаючи зі зсуву offset, тобто з елемента buffer [offset].

Абстрактні класи Reader і Writer
Абстрактний клас Reader надає функціонал для читання текстової
інформації. Розглянемо його основні методи:
absract void close (): закриває потік введення
int read (): повертає цілочисельне подання наступного символу в потоці.
Якщо таких символів немає, і досягнутий кінець файлу, то повертається
число -1
int read (char [] buffer): зчитує в масив buffer з потоку символи, кількість
яких дорівнює довжині масиву buffer. Повертає кількість успішно зчитаних символів. При досягненні кінця файлу повертає -1
int read (CharBuffer buffer): зчитує в об'єкт CharBuffer з потоку символи.
Повертає кількість успішно зчитаних символів. При досягненні кінця
файлу повертає -1
absract int read (char [] buffer, int offset, int count): зчитує в масив buffer, починаючи зі зсуву offset, із потоку символи, кількість яких рівна count
long skip (long count): пропускає кількість символів, рівну count. Повертає число успішно пропущених символів

Клас Writer визначає функціонал для всіх символьних потоків виведення.
Його основні методи:
Writer append (char c): додає в кінець вихідного потоку символ c. Повертає об'єкт Writer
Writer append (CharSequence chars): додає в кінець вихідного потоку набір символів chars. Повертає об'єкт Writer
abstract void close (): закриває потік
abstract void flush (): очищає буфери потоку
void write (int c): записує в потік один символ, який має цілочисельне подання
void write (char [] buffer): записує в потік масив символів
abstract void write (char [] buffer, int off, int len): записує в потік тільки кілька символів з масиву buffer. Причому кількість символів рівна len, а відбір символів з масиву починається з індексу off
void write (String str): записує в потік рядок
void write (String str, int off, int len): записує в потік з рядка деяку кількість символів, що дорівнює len, причому відбір символів з рядка починається з індексу off

Функціонал, описаний класами Reader і Writer, успадковується безпосередньо класами символьних потоків, зокрема класами FileReader і FileWriter відповідно, призначеними для роботи з текстовими файлами

Клас File
Клас File з пакету java.io дозволяє працювати з файлами і каталогами як із об'єктами файлової системи. Цей клас не управляє самими потоками, але використовується для отримання інформації про файли або каталоги, а також для виконання операцій над ними. Основні методи класу File:

boolean createNewFile(): створює новий порожній файл. Якщо файл вже існує, метод повертає false.
boolean exists(): перевіряє, чи існує файл або каталог.
boolean delete(): видаляє файл або каталог.
String getName(): повертає назву файлу або каталогу.
String getPath(): повертає шлях до файлу або каталогу.
boolean isDirectory(): перевіряє, чи є об'єкт каталогом.
boolean isFile(): перевіряє, чи є об'єкт файлом.
long length(): повертає розмір файлу в байтах.
String[] list(): повертає масив імен файлів і каталогів у поточному каталозі.

Клас Files
Клас Files з пакету java.nio.file надає статичні методи для виконання файлових операцій, таких як створення, копіювання, переміщення, видалення файлів, а також для роботи з вмістом файлів.

Основні методи Files:
boolean exists(Path path): перевіряє, чи існує файл або каталог.
void createFile(Path path): створює новий файл.
void createDirectory(Path path): створює новий каталог.
Path copy(Path source, Path target, CopyOption... options): копіює файл з одного місця в інше.
Path move(Path source, Path target, CopyOption... options): переміщує файл або каталог.
void delete(Path path): видаляє файл або каталог.
List<String> readAllLines(Path path): читає всі рядки з файлу та повертає їх у вигляді списку.
void write(Path path, Iterable<? extends CharSequence> lines, Charset cs, OpenOption... options): записує рядки у файл.
long size(Path path): повертає розмір файлу.

Path — це інтерфейс з пакету java.nio.file, який представляє шлях до файлу або каталогу в файловій системі. Клас Paths використовується для отримання об'єкта Path.

Основні методи Path:
Path getFileName(): повертає ім'я файлу або каталогу.
Path getParent(): повертає батьківський каталог.
Path toAbsolutePath(): повертає абсолютний шлях до файлу.
boolean startsWith(String path): перевіряє, чи починається шлях із заданого підшляху.
boolean endsWith(String path): перевіряє, чи закінчується шлях заданим підшляхом.
Path resolve(Path other): об'єднує два шляхи.
Path relativize(Path other): отримує відносний шлях між двома шляхами.


Серіалізація і десеріалізація — це процеси перетворення об'єктів у Java у потік байтів (серіалізація) і відновлення їх з потоку байтів назад у об'єкт (десеріалізація). Це важливі механізми для зберігання об'єктів, передачі їх через мережу або збереження у файл.

Серіалізація
Серіалізація — це процес перетворення стану об'єкта в потік байтів для зберігання (у файлі, базі даних) або для передачі по мережі.

Для того щоб клас підтримував серіалізацію:
Клас повинен реалізувати інтерфейс Serializable. Це маркерний інтерфейс, тобто він не містить методів, але його реалізація вказує JVM, що об'єкти цього класу можуть бути серіалізовані.

Всі поля класу, які повинні бути серіалізовані, мають бути або примітивними типами, або посиланнями на серіалізовані об'єкти.

Основні методи для серіалізації:
ObjectOutputStream: записує серіалізовані об'єкти у файл або інший потік.
writeObject(): використовується для серіалізації об'єкта.
Десеріалізація
Десеріалізація — це зворотний процес, у якому потік байтів перетворюється назад в оригінальний об'єкт.

Основні аспекти серіалізації:
transient: Поля, які не повинні бути серіалізовані, позначаються ключовим словом transient. При серіалізації такі поля пропускаються.

serialVersionUID: Це спеціальне поле, яке дозволяє ідентифікувати версію серіалізованого класу. Якщо клас змінюється (наприклад, додаються нові поля), це може призвести до конфлікту версій при десеріалізації. Тому рекомендується явно вказувати serialVersionUID для забезпечення сумісності.